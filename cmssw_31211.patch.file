From 75e7183e1da1d7abb8bf82dd4e54ca7aad1c39ea Mon Sep 17 00:00:00 2001
From: David <David.Lange@cern.ch>
Date: Mon, 24 Aug 2020 14:06:22 +0200
Subject: [PATCH] remove dead code

---
 SimTracker/TrackHistory/doc/TrackHistory.doc  |   1 -
 .../interface/TrackClassifierByProxy.h        | 106 ------------------
 2 files changed, 107 deletions(-)
 delete mode 100644 SimTracker/TrackHistory/interface/TrackClassifierByProxy.h

diff --git a/SimTracker/TrackHistory/doc/TrackHistory.doc b/SimTracker/TrackHistory/doc/TrackHistory.doc
index 0f14cc09a84bf..3dc81cc7a8fa4 100755
--- a/SimTracker/TrackHistory/doc/TrackHistory.doc
+++ b/SimTracker/TrackHistory/doc/TrackHistory.doc
@@ -25,7 +25,6 @@
 - JetVetoedTracksAssociatorDRVertex
 - TrackCategories
 - TrackClassifier
-- TrackClassifierByProxy
 - TrackHistory
 - TrackQuality
 - Utils
diff --git a/SimTracker/TrackHistory/interface/TrackClassifierByProxy.h b/SimTracker/TrackHistory/interface/TrackClassifierByProxy.h
deleted file mode 100644
index d05c9e2a501db..0000000000000
--- a/SimTracker/TrackHistory/interface/TrackClassifierByProxy.h
+++ /dev/null
@@ -1,106 +0,0 @@
-
-#ifndef TrackClassifierByProxy_h
-#define TrackClassifierByProxy_h
-
-#include "DataFormats/Common/interface/AssociationMap.h"
-
-#include "SimTracker/TrackHistory/interface/TrackClassifier.h"
-
-//! Get track history and classification by proxy
-template <typename Collection>
-class TrackClassifierByProxy : public TrackClassifier
-{
-
-public:
-
-    //! Association type.
-    typedef edm::AssociationMap<edm::OneToMany<Collection, reco::TrackCollection> > Association;
-
-    //! Constructor by ParameterSet.
-    TrackClassifierByProxy(edm::ParameterSet const & config) : TrackClassifier(config),
-            proxy_( config.getUntrackedParameter<edm::InputTag>("trackProducer") ) {}
-
-    //! Pre-process event information (for accessing reconstraction information).
-    virtual void newEvent(edm::Event const & event, edm::EventSetup const & config)
-    {
-        // Get the association part of the proxy to the collection
-        event.getByLabel(proxy_, proxyHandler_);
-        // Call the previous new event
-        TrackClassifier::newEvent(event, config);
-    }
-
-    //! Classify the TrackingVertex in categories.
-    TrackClassifierByProxy<Collection> const & evaluate (TrackingParticleRef const & track)
-    {
-        TrackClassifier::evaluate(track);
-        return *this;
-    }
-
-    //! Classify any Tracks in categories.
-    TrackClassifierByProxy<Collection> const & evaluate (edm::Ref<Collection> const & track, std::size_t index)
-    {
-        const reco::TrackRefVector * tracks = 0;
-
-        try
-        {
-            // Get a reference to the vector of associated tracks
-            tracks = proxyHandler_->find(track)->val;
-        }
-        catch (edm::Exception& e)
-        {
-            // If association fails define the track as unknown
-            reset();
-            unknownTrack();
-            return *this;
-        }
-
-        // Evaluate the history for a given index
-        TrackClassifier::evaluate( tracks->at(index) );
-
-        return *this;
-    }
-
-    //! Classify any tracks in categories.
-    TrackClassifierByProxy<Collection> const & evaluate (edm::Ref<Collection> const & track)
-    {
-        const reco::TrackRefVector * tracks = 0;
-
-        try
-        {
-            // Get a reference to the vector of associated tracks
-            tracks = proxyHandler_->find(track)->val;
-        }
-        catch (edm::Exception& e)
-        {
-            // If association fails define the track as unknown
-            reset();
-            unknownTrack();
-            return *this;
-        }
-
-        // Loop over all the associated tracks
-        for (std::size_t index = 0; index < tracks->size(); ++index)
-        {
-            // Copy the last status for all the flags
-            Flags flags(flags_);
-
-            // Evaluate the history for a given index
-            TrackClassifier::evaluate( tracks->at(index) );
-
-            // Combine OR the flag information
-            for (std::size_t i = 0; i < flags_.size(); ++i)
-                flags_[i] = flags_[i] | flags[i];
-        }
-
-        return *this;
-    }
-
-private:
-
-    const edm::InputTag proxy_;
-
-    edm::Handle<Association> proxyHandler_;
-
-};
-
-#endif
