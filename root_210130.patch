diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx
index 1cd0544c9d..499842404f 100644
--- a/core/metacling/src/TCling.cxx
+++ b/core/metacling/src/TCling.cxx
@@ -1571,6 +1571,20 @@ TCling::TCling(const char *name, const char *title, const char* const argv[])
    static llvm::raw_fd_ostream fMPOuts (STDOUT_FILENO, /*ShouldClose*/false);
    fMetaProcessor = llvm::make_unique<cling::MetaProcessor>(*fInterpreter, fMPOuts);
 
+   if (!fromRootCling) {
+      cling::DynamicLibraryManager& DLM = *fInterpreter->getDynamicLibraryManager();
+      // Make sure cling looks into ROOT's libdir, even if not part of LD_LIBRARY_PATH
+      // e.g. because of an RPATH build.
+      DLM.addSearchPath(TROOT::GetLibDir().Data());
+      auto ShouldPermanentlyIgnore = [](llvm::StringRef FileName) -> bool{
+         llvm::StringRef stem = llvm::sys::path::stem(FileName);
+         return stem.startswith("libNew") || stem.startswith("libcppyy_backend");
+      };
+      // Initialize the dyld for the llvmLazyFunctionCreator.
+      DLM.initializeDyld(ShouldPermanentlyIgnore);
+      fInterpreter->installLazyFunctionCreator(llvmLazyFunctionCreator);
+   }
+
    RegisterCxxModules(*fInterpreter);
    RegisterPreIncludedHeaders(*fInterpreter);
 
@@ -1603,20 +1617,6 @@ TCling::TCling(const char *name, const char *title, const char* const argv[])
    fClingCallbacks = clingCallbacks.get();
    fClingCallbacks->SetAutoParsingSuspended(fIsAutoParsingSuspended);
    fInterpreter->setCallbacks(std::move(clingCallbacks));
-
-   if (!fromRootCling) {
-      cling::DynamicLibraryManager& DLM = *fInterpreter->getDynamicLibraryManager();
-      // Make sure cling looks into ROOT's libdir, even if not part of LD_LIBRARY_PATH
-      // e.g. because of an RPATH build.
-      DLM.addSearchPath(TROOT::GetLibDir().Data());
-      auto ShouldPermanentlyIgnore = [](llvm::StringRef FileName) -> bool{
-         llvm::StringRef stem = llvm::sys::path::stem(FileName);
-         return stem.startswith("libNew") || stem.startswith("libcppyy_backend");
-      };
-      // Initialize the dyld for the llvmLazyFunctionCreator.
-      DLM.initializeDyld(ShouldPermanentlyIgnore);
-      fInterpreter->installLazyFunctionCreator(llvmLazyFunctionCreator);
-   }
 }
